#pragma once

#include <memory>
#include <sstream>
#include <unordered_map>
#include <stack>
#include <vector>
#include <iomanip>
#include <chrono>
#include <ctime>

#include "ast_builder.h"
#include "print_node.h"
#include "function_entry_node.h"
#include "variable_node.h"
#include "branch_node.h"
#include "operator_node.h"
#include "base_node.h"


class AssemblyGenerator : public IVariableVisitor {
public:
    enum class Section {
        NONE,
        DATA,
        TEXT
    };

    struct GeneratorContext
    {
        std::string timestamp;
        std::string compiler;
        bool debugOutput;
        bool optimizeCode;
        int stackSize;
        std::vector<std::shared_ptr<Variable>> variables;

        GeneratorContext(std::vector<std::shared_ptr<Variable>> &v,
                        const std::string& ts = "2025-04-08 12:09:01",
                        const std::string& comp = "ost-v1",
                        bool debug = true,
                        bool optimize = true,
                        int stack = 1024
                    )
            : variables(v)
            , compiler(comp)
            , debugOutput(debug)
            , optimizeCode(optimize)
            , stackSize(stack)
            , timestamp(ts)
        {}

        // Find variable by uuid
        std::shared_ptr<Variable> FindVariableByUuid(const std::string& uuid) const {
            for (const auto& var : variables) {
                if (var->GetUuid() == uuid) {
                    return var;
                }
            }
            return nullptr;
        }
    };

    AssemblyGenerator(const GeneratorContext& context)
        : m_context(context)
    {
        Reset();
    }

    void Reset() {
        m_assembly.str("");
        m_labelCounter = 0;
        m_currentStackOffset = 0;
        m_depth = 0;
        m_currentSection = Section::NONE;
    }

    void GenerateHeader() {
        AddComment("Assembly generated by Visual Node Editor");
        AddComment("Generation time: " + m_context.timestamp);
        AddComment("Generated by: " + m_context.compiler);
        AddComment("Optimization: " + m_context.optimizeCode ? "enabled" : "disabled");
    }

    virtual void GenerateExit()  = 0;

    void StartSection(Section section) {
        if (m_currentSection == section) return;

        m_currentSection = section;
        switch (section) {
            case Section::DATA:
                AddComment("=======================  DATA  =======================");
                break;
            case Section::TEXT:
                AddComment("=======================  CODE  =======================");
                GenerateMain();
                break;
            default:
                break;
        }
    }

    void GenerateNodesVariables(const std::vector<std::shared_ptr<BaseNode>> &nodes)
    {
        // Generate all constants
        for (const auto& n : nodes) {
            n->Accept(*this);
        }

        m_assembly << "\n\n";
    }

    void GenerateGlobalVariables()
    {
        for (const auto& v : m_context.variables) {
            GenerateVariable(v);
        }
    }

    void GenerateTextSection(const std::vector<std::shared_ptr<ASTNode>>& orderedNodes) 
    {
        for (const auto& node : orderedNodes)
        {
            GenerateNodeCode(node);
        }
    }

    std::string GetAssembly() const {
        return m_assembly.str();
    }

protected:

    virtual void GenerateNodeCode(std::shared_ptr<ASTNode> node, bool isDataPath = false) = 0;

    virtual void AddComment(const std::string& comment) = 0;

    virtual void GenerateMain()  = 0;

    virtual void GenerateVariable(const std::shared_ptr<Variable> v) = 0;


    std::string GenerateUniqueLabel(const std::string& prefix)
    {
        return prefix + "_" + std::to_string(m_labelCounter++);
    }

    GeneratorContext m_context;
    std::stringstream m_assembly;
    int m_labelCounter;
    int m_currentStackOffset;
    int m_depth{0};
    Section m_currentSection;

private:


};