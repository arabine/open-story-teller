#pragma once

#include <memory>
#include <sstream>
#include <unordered_map>
#include <stack>
#include <vector>
#include <iomanip>
#include <chrono>
#include <ctime>

#include "ast_builder.h"
#include "print_node.h"
#include "function_entry_node.h"
#include "variable_node.h"
#include "branch_node.h"
#include "operator_node.h"
#include "base_node.h"


class AssemblyGenerator : public IVariableVisitor {
public:
    struct GeneratorContext {
        std::string timestamp;
        std::string username;
        bool debugOutput;
        bool optimizeCode;
        int stackSize;

        GeneratorContext(const std::string& ts = "2025-04-08 12:09:01",
                        const std::string& user = "anonymous",
                        bool debug = true,
                        bool optimize = true,
                        int stack = 1024)
            : timestamp(ts)
            , username(user)
            , debugOutput(debug)
            , optimizeCode(optimize)
            , stackSize(stack)
        {}
    };

    AssemblyGenerator(const GeneratorContext& context = GeneratorContext())
        : m_context(context)
    {
        Reset();
    }

    void Reset() {
        m_assembly.str("");
        m_labelCounter = 0;
        m_variableAddresses.clear();
        m_currentStackOffset = 0;
        m_stringLiterals.clear();
        m_depth = 0;
        m_currentSection = Section::NONE;
    }

    std::string GenerateAssembly(std::vector<std::shared_ptr<BaseNode>> &nodes, const std::vector<std::shared_ptr<ASTNode>>& order, const std::vector<std::shared_ptr<Variable>> &variables)
    {
        Reset();
        
        // Generate header comments
        GenerateHeader();

        // Generate data section
        StartSection(Section::DATA);
        GenerateDataSection(nodes, variables);

        // Generate text section
        StartSection(Section::TEXT);
        GenerateTextSection(order);

        return m_assembly.str();
    }

protected:
    enum class Section {
        NONE,
        DATA,
        TEXT
    };

    virtual void GenerateNodeCode(std::shared_ptr<ASTNode> node, bool isDataPath = false) = 0;

    virtual void AddComment(const std::string& comment) = 0;

    virtual void GenerateExit()  = 0;

    virtual void GenerateVariable(const std::shared_ptr<Variable> v) = 0;


    std::string AddStringLiteral(const std::string& text)
    {
        std::string label = "str_" + std::to_string(m_stringLiterals.size());
        m_stringLiterals.push_back(text);
        return label;
    }

    std::string GenerateUniqueLabel(const std::string& prefix)
    {
        return prefix + "_" + std::to_string(m_labelCounter++);
    }

protected:
    GeneratorContext m_context;
    std::stringstream m_assembly;
    int m_labelCounter;
    std::unordered_map<std::string, std::string> m_variableAddresses;
    int m_currentStackOffset;
    std::vector<std::string> m_stringLiterals;
    int m_depth{0};
    Section m_currentSection;


private:

    void GenerateHeader() {
        AddComment("Assembly generated by Visual Node Editor");
        AddComment("Generation time: " + m_context.timestamp);
        AddComment("Generated by: " + m_context.username);
        AddComment("Optimization: " + m_context.optimizeCode ? "enabled" : "disabled");
    }

    void StartSection(Section section) {
        if (m_currentSection == section) return;

        m_currentSection = section;
        switch (section) {
            case Section::DATA:
                AddComment("=======================  DATA  =======================");
                break;
            case Section::TEXT:
                AddComment("=======================  CODE  =======================");
                break;
            default:
                break;
        }
    }

    void GenerateDataSection(const std::vector<std::shared_ptr<BaseNode>> &nodes, const std::vector<std::shared_ptr<Variable>> &variables)
    {
        // Generate all constants
        for (const auto& n : nodes) {
            n->Accept(*this);
        }

        // generate all variables in RAM
        for (auto & v : variables)
        {
            GenerateVariable(v);
        }
  
        m_assembly << "\n\n";
    }

    void GenerateTextSection(const std::vector<std::shared_ptr<ASTNode>>& orderedNodes) {
        // Program entry point
        m_assembly << ".main:\n";

        for (const auto& node : orderedNodes) {
            GenerateNodeCode(node);
        }

        // Program exit
        GenerateExit();
    }

    void CollectVariables(std::shared_ptr<ASTNode> node)
    {
        if (!node) return;

        if (node->IsType<VariableNode>()) {
            auto* varNode = node->GetAs<VariableNode>();
            /*
            std::string varName = varNode->GetN();
            if (m_variableAddresses.find(varName) == m_variableAddresses.end()) {
                m_variableAddresses[varName] = varName;
                m_assembly << varName << ":\n" << varNode->GenerateAssembly();
            }
                */
        }

        // Traverse children
        for (auto& child : node->children) {
            CollectVariables(child);
        }

        // Traverse data inputs
        for (const auto& [port, inputNode] : node->dataInputs) {
            CollectVariables(inputNode);
        }
    }



};